version: "3.9"
services:
  db:
    image: kartoza/postgis
    privileged: true
    restart: always
    ports:
      - 54326:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: long_memory_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgresql:/var/lib/postgresql
    networks:
      - long_memory

  backend:
    build: ./backend
    privileged: true
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMIN_LOGIN: $ADMIN_LOGIN
      ADMIN_PASS: $ADMIN_PASS
    command: bash -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      python create_super_user_admin.py $ADMIN_LOGIN $ADMIN_PASS &&
      gunicorn long_memory.wsgi -b 0.0.0.0:8080
      "
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./www:/www
    networks:
      - long_memory

  nginx:
    build: ./nginx
    ports:
      - 8000:443
    depends_on:
      - backend
    volumes:
      - ./www:/www
    networks:
      - long_memory

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 20s
      timeout: 10s
      retries: 5
    depends_on:
      - db
    networks:
      - long_memory

  frontend:
    build: ./frontend
    ports:
      - 443:443
      - 80:80
    depends_on:
      - nginx
    volumes:
      - ./www:/www
    networks:
      - long_memory

  monitoring_script:
    build: ./notification_system/monitoring_script
    restart: always
    command: bash -c "
      python monitoring.py
      "
    depends_on:
      - rabbitmq
    networks:
      - long_memory

  email_sender:
    build: ./notification_system/mail
    restart: always
    command: bash -c "python email_sender.py"
    depends_on:
      - monitoring_script
    networks:
      - long_memory

  telegram_sender:
    build: ./notification_system/telegram
    restart: always
    command: bash -c "python bot.py"
    depends_on:
      - monitoring_script
    networks:
      - long_memory

  vk_sender:
    build: ./notification_system/vk
    restart: always
    command: bash -c "python vk_sender.py"
    depends_on:
      - monitoring_script
    networks:
      - long_memory

  support_api:
    build: ./online_support/backend
    privileged: true
    restart: always
    ports:
      - 5000:5000
    volumes:
      - ./www:/www
    command: bash -c "
      uvicorn main:app --host 0.0.0.0 --port 5000 --ssl-keyfile=./www/ssl/longmemory.key --ssl-certfile=./www/ssl/longmemory.crt
      "

networks:
  long_memory:
    driver: bridge